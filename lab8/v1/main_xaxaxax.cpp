asm("filladr:");
    asm("pushq   %rbp");
    asm("movq    %rsp, %rbp");
    asm("subq    $16, %rsp");
    asm("movq    $0, -8(%rbp)");
    asm("movl    $0, %eax");
    asm("call    getchar");
    asm("movb    %al, -9(%rbp)");
    asm("movsbl  -9(%rbp), %eax");
    asm("subl    $48, %eax");
    asm("cltq");
    asm("movq    %rax, -8(%rbp)");
    asm("jmp     .LOOP2");
asm(".LOOP3:");
    asm("movq    -8(%rbp), %rax");
    asm("leaq    0(,%rax,8), %rdx");
    asm("movq    -8(%rbp), %rax");
    asm("addq    %rax, %rax");
    asm("addq    %rax, %rdx");
    asm("movzbl  -9(%rbp), %eax");
    asm("xorl    $48, %eax");
    asm("movsbq  %al, %rax");
    asm("addq    %rdx, %rax");
    asm("movq    %rax, -8(%rbp)");
asm(".LOOP2:");
    asm("movl    $0, %eax");
    asm("call    getchar");
    asm("movb    %al, -9(%rbp)");
    asm("cmpb    $47, -9(%rbp)");
    asm("setg    %dl");
    asm("cmpb    $57, -9(%rbp)");
    asm("setle   %al");
    asm("andl    %edx, %eax");
    asm("testb   %al, %al");
    asm("jne     .LOOP3");
    asm("movq    -8(%rbp), %rax");
    asm("leave");
    asm("ret");
asm("freeadr:");
    asm("pushq   %rbp");
    asm("movq    %rsp, %rbp");
    asm("subq    $80, %rsp");
    asm("movq    %rdi, -72(%rbp)");
    asm("leaq    -48(%rbp), %rax");
    asm("addq    $29, %rax");
    asm("movq    %rax, -8(%rbp)");
    asm("movabsq $3978425819141910832, %rax");
    asm("movq    %rax, -59(%rbp)");
    asm("movl    $3749943, -52(%rbp)");
asm(".LOOP6:");
    asm("movq    -72(%rbp), %rcx");
    asm("movabsq $-3689348814741910323, %rdx");
    asm("movq    %rcx, %rax");
    asm("mulq    %rdx");
    asm("shrq    $3, %rdx");
    asm("movq    %rdx, %rax");
    asm("salq    $2, %rax");
    asm("addq    %rdx, %rax");
    asm("addq    %rax, %rax");
    asm("subq    %rax, %rcx");
    asm("movq    %rcx, %rdx");
    asm("movq    -8(%rbp), %rax");
    asm("leaq    -1(%rax), %rcx");
    asm("movq    %rcx, -8(%rbp)");
    asm("movzbl  -59(%rbp,%rdx), %edx");
    asm("movb    %dl, (%rax)");
    asm("movq    -72(%rbp), %rax");
    asm("movabsq $-3689348814741910323, %rdx");
    asm("mulq    %rdx");
    asm("movq    %rdx, %rax");
    asm("shrq    $3, %rax");
    asm("movq    %rax, -72(%rbp)");
    asm("cmpq    $0, -72(%rbp)");
    asm("jne     .LOOP6");
    asm("jmp     .LOOP7");
asm(".LOOP8:");
    asm("movq    -8(%rbp), %rax");
    asm("movzbl  (%rax), %eax");
    asm("movsbl  %al, %eax");
    asm("movl    %eax, %edi");
    asm("call    putchar");
asm(".LOOP7:");
    asm("addq    $1, -8(%rbp)");
    asm("leaq    -48(%rbp), %rax");
    asm("addq    $30, %rax");
    asm("cmpq    %rax, -8(%rbp)");
    asm("jne     .LOOP8");
    asm("movl    $10, %edi");
    asm("call    putchar");
    asm("nop");
    asm("leave");
    asm("ret");

int main() {
    asm("subq    $32, %rsp");
    asm("call    filladr");
    asm("movq    %rax, -24(%rbp)");
    asm("call    filladr");
    asm("movq    %rax, -32(%rbp)");
    asm("call    filladr");
    asm("movq    %rax, -8(%rbp)");
    asm("movq    $0, -16(%rbp)");
    asm("jmp     .LOOP10");
asm(".LOOP11:");
    asm("movq    -8(%rbp), %rax");
    asm("movl    $0, %edx");
    asm("divq    -32(%rbp)");
    asm("movq    %rdx, %rax");
    asm("movq    %rax, %rdi");
    asm("call    freeadr");
    asm("movq    -8(%rbp), %rax");
    asm("movl    $0, %edx");
    asm("divq    -32(%rbp)");
    asm("movq    %rax, -8(%rbp)");
    asm("addq    $1, -16(%rbp)");
asm(".LOOP10:");
    asm("movq    -16(%rbp), %rax");
    asm("addq    $1, %rax");
    asm("cmpq    -24(%rbp), %rax");
    asm("jb      .LOOP11");
    asm("movq    -8(%rbp), %rax");
    asm("movq    %rax, %rdi");
    asm("call    freeadr");
    asm("movl    $0, %eax");
    asm("leave");
    asm("ret");
}

